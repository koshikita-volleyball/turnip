name: deploy

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

env:
  project-name: turnip
  client-directory: ./client
  server-directory: ./server

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  lambda-deploy:
    needs: lambda-test
    if: ${{ needs.lambda-test.outputs.test-status == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: aws-actions/setup-sam@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - run: sam build --use-container
        working-directory: ${{ env.server-directory }}
      - name: Deploy Lambda
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-image-repos \
            --stack-name ${{ env.project-name }} \
            --s3-bucket ${{ env.project-name }} \
            --capabilities CAPABILITY_IAM \
          || aws s3 mb s3://${{ env.project-name }} && sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-image-repos \
            --stack-name ${{ env.project-name }} \
            --s3-bucket ${{ env.project-name }} \
            --capabilities CAPABILITY_IAM
        working-directory: ${{ env.server-directory }}
      # - name: Get API Gateway URL
      #   run: |
      #     API_GATEWAY_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.project-name }} --query "Stacks[0].Outputs[?OutputKey=='YourInfoApi'].OutputValue" --output text --no-cli-pager)
      #     echo "API_GATEWAY_URL=$API_GATEWAY_URL" >> $GITHUB_ENV
      # - name: Cat API Gateway URL
      #   run: echo $API_GATEWAY_URL
      # - name: Check status code of curl response
      #   run: |
      #     response=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.API_GATEWAY_URL }}/your-info")
      #     if [ $response -eq 200 ]; then
      #       echo "Success"
      #     else
      #       echo "Failed"
      #       echo "Response code: $response"
      #       echo "API Gateway URL: ${{ env.API_GATEWAY_URL }}"
      #       exit 1
      #     fi
    # Outputsで機密情報を扱うことはできない？
      # - name: Keep API Gateway URL
      #   id: api-gateway-output
      #   run: echo "url=${{ env.API_GATEWAY_URL }}" >> "$GITHUB_OUTPUT"
    # outputs:
    #   api-gateway-url: ${{ steps.api-gateway-output.outputs.url }}
  # nextjs-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18"
  #         cache: yarn
  #     - name: Install dependencies
  #       run: yarn
  #     - name: Test
  #       run: yarn test
  #   outputs:
  #     test-status: ${{ job.status }}
  # # Build job
  # nextjs-build:
  #   needs:
  #     - lambda-deploy
  #     - nextjs-test
  #   if: ${{ needs.nextjs-test.outputs.test-status == 'success' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     # ★ 機密情報を扱う際にOutputsを使用すると空文字になるため、二度手間になってしまうが、、、
  #     - uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     # ★ 機密情報を扱う際にOutputsを使用すると空文字になるため、二度手間になってしまうが、、、
  #     - name: Get API Gateway URL
  #       run: |
  #         API_GATEWAY_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.project_name }} --query "Stacks[0].Outputs[?OutputKey=='YourInfoApi'].OutputValue" --output text --no-cli-pager)
  #         echo "API_GATEWAY_URL=$API_GATEWAY_URL" >> $GITHUB_ENV
  #     - name: API Gateway URL empty guard
  #       run: |
  #         echo "API Gateway URL -> ${{ env.API_GATEWAY_URL }}"
  #         if [ -z "${{ env.API_GATEWAY_URL }}" ]; then
  #           echo "API Gateway URL is empty"
  #           exit 1
  #         fi
  #     - name: API Gateway URL empty guard
  #       run: |
  #         echo "API Gateway URL -> ${{ env.API_GATEWAY_URL }}"
  #         if [ -z "${{ env.API_GATEWAY_URL }}" ]; then
  #           echo "API Gateway URL is empty"
  #           exit 1
  #         fi
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18"
  #         cache: yarn
  #     - name: Setup Pages
  #       uses: actions/configure-pages@v2
  #       with:
  #         # Automatically inject basePath in your Next.js configuration file and disable
  #         # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
  #         #
  #         # You may remove this line if you want to manage the configuration yourself.
  #         static_site_generator: next
  #     - name: Restore cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           .next/cache
  #         # Generate a new cache whenever packages or source files change.
  #         key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
  #         # If source files changed but packages didn't, rebuild from a prior cache.
  #         restore-keys: |
  #           ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
  #     - name: Install dependencies
  #       run: yarn
  #     # - name: Generating .env.local
  #     #   run: |
  #     #     echo "${{ secrets.ENV_LOCAL }}" > .env.local
  #     - name: Show API Gateway URL
  #       env:
  #         api-gateway-url: ${{ env.API_GATEWAY_URL }}
  #       run: |
  #         echo "API Gateway URL -> ${{ env.api-gateway-url }}"
  #     - name: Check status code of curl response
  #       env:
  #         api-gateway-url: ${{ env.API_GATEWAY_URL }}
  #       run: |
  #         response=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.API_GATEWAY_URL }}/your-info")
  #         if [ $response -eq 200 ]; then
  #           echo "Success"
  #         else
  #           echo "Failed"
  #           echo "Response code: $response"
  #           echo "API Gateway URL: ${{ env.API_GATEWAY_URL }}"
  #           exit 1
  #         fi
  #     - name: Set API Gateway URL
  #       env:
  #         api-gateway-url: ${{ env.API_GATEWAY_URL }}
  #       run: |
  #         echo "NEXT_PUBLIC_LAMBDA_API_URL=${{ env.API_GATEWAY_URL }}" >> .env.local
  #     - name: My Debug # デバグ用コード
  #       env:
  #         api-gateway-url: ${{ env.API_GATEWAY_URL }}
  #       run: |
  #         echo "NEXT_PUBLIC_LAMBDA_API_URL=${{ env.API_GATEWAY_URL }}" >> ./public/env.txt
  #     - name: My Debug # デバグ用コード
  #       env:
  #         api-gateway-url: ${{ needs.lambda-deploy.outputs.api-gateway-url }}
  #       run: |
  #         echo "NEXT_PUBLIC_LAMBDA_API_URL=${{ env.api-gateway-url }}" >> ./public/output-env.txt
  #     - name: Cat .env.local
  #       run: |
  #         cat .env.local
  #     - name: Build with Next.js
  #       run: yarn build
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v1
  #       with:
  #         path: ./dist
  # # Deployment job
  # nextjs-deploy:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: nextjs-build
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v1
