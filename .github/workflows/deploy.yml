name: deploy

on:
  workflow_dispatch:
  push:
    tags:
      - 'v-*'

env:
  project-name: ${{ secrets.PROJECT_NAME }}
  node-version: 18

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  lambda-check:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./server/src/
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Install dependencies
        run: yarn install
      - name: Lint
        run: yarn lint
      - name: Type check
        run: yarn type-check
      - name: Test
        run: yarn test
      - name: Vulnerability check
        run: yarn audit
      # - name: Deprication check
      #   run: yarn outdated
  lambda-deploy:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./server/
    needs: lambda-check
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: aws-actions/setup-sam@v2
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create dotenv file
        run: echo $'${{ secrets.LAMBDA_DOTENV }}' > ./src/.env
      - name: Add Data to dotenv file
        run: echo "ENVIRONMENT=production" >> ./src/.env
      - run: sam build --use-container
      - name: Deploy Lambda
        run: sam deploy --stack-name ${{ env.project-name }}-production
  nextjs-check:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./client/
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Install dependencies
        run: yarn install
      - name: Lint
        run: yarn lint
      - name: Type check
        run: yarn type-check
      - name: Test
        run: yarn test
      - name: Vulnerability check
        run: yarn audit
  nextjs-build:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./client/
    needs:
      - nextjs-check
      - lambda-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Get API Gateway URL
        run: |
          API_GATEWAY_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.project-name }}-production --query "Stacks[0].Outputs[?OutputKey=='MyApiGateway'].OutputValue" --output text --no-cli-pager)
          echo "API_GATEWAY_URL=$API_GATEWAY_URL" >> $GITHUB_ENV
      - name: API Gateway URL empty guard
        run: |
          echo "API Gateway URL -> ${{ env.API_GATEWAY_URL }}"
          if [ -z "${{ env.API_GATEWAY_URL }}" ]; then
            echo "API Gateway URL is empty"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Setup Pages
        uses: actions/configure-pages@v3
        with:
          static_site_generator: next
      - name: Install dependencies
        run: yarn install # --production --frozen-lockfile
        # env:
        #   NODE_ENV: production
      - name: Generating .env.local
        run: |
          echo "${{ secrets.NEXTJS_DOTENV_LOCAL }}" > .env.local
      - name: Check status code of curl response
        env:
          api-gateway-url: ${{ env.API_GATEWAY_URL }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.API_GATEWAY_URL }}/api/hello")
          if [ $response -eq 200 ]; then
            echo "Success"
          else
            echo "Failed"
            echo "Response code: $response"
            echo "API Gateway URL: ${{ env.API_GATEWAY_URL }}"
            exit 1
          fi
      - name: Set API Gateway URL
        run: echo "NEXT_PUBLIC_LAMBDA_API_URL=${{ env.API_GATEWAY_URL }}" >> .env.local
      - name: Cat .env.local
        run: cat .env.local
      - name: Create .env file
        run: echo $'${{ secrets.NEXTJS_DOTENV }}' > .env
      - name: Build with Next.js
        run: yarn build
        # env:
        #   NODE_ENV: production
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./client/dist/
  nextjs-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: nextjs-build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
