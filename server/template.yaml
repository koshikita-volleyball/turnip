AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  turnip

  Sample SAM Template for turnip

Globals:
  Function:
    Timeout: 300
    MemorySize: 256
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'*'"

Resources:
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-s3-bucket
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  ListedInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Code
          AttributeType: S
      KeySchema:
        - AttributeName: Code
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AWS::StackName}-listed-info

  PricesDailyQuotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Code
          AttributeType: S
        - AttributeName: Date
          AttributeType: S
      KeySchema:
        - AttributeName: Code
          KeyType: HASH
        - AttributeName: Date
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AWS::StackName}-prices-daily-quotes

  FinsStatementsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: LocalCode
          AttributeType: S
        - AttributeName: DisclosedDate
          AttributeType: S
      KeySchema:
        - AttributeName: LocalCode
          KeyType: HASH
        - AttributeName: DisclosedDate
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AWS::StackName}-fins-statements

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowS3Object
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${MyBucket}/*"
              - Sid: AllowS3List
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${MyBucket}"
              - Sid: AllowListedInfoTable
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt ListedInfoTable.Arn
              - Sid: AllowPricesDailyQuotesTable
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt PricesDailyQuotesTable.Arn
              - Sid: AllowFinsStatementsTable
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt FinsStatementsTable.Arn
              - Sid: AllowCloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-hello
      PackageType: Image
      ImageConfig:
        Command: [ "api.lambdaHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /api/hello
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  BusinessDayFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-business-day
      PackageType: Image
      ImageConfig:
        Command: [ "api.businessDayHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /api/business_day
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  BusinessDayUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-business-day-update
      PackageType: Image
      ImageConfig:
        Command: [ "update.businessDayUpdateHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 10 * * ? *)
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  InfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-info
      PackageType: Image
      ImageConfig:
        Command: [ "api.infoHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /api/info
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  ListedInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-listed-info
      PackageType: Image
      ImageConfig:
        Command: [ "api.listedInfoHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /api/listed_info
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  PricesDailyQuotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-prices-daily_quotes
      PackageType: Image
      ImageConfig:
        Command: [ "api.pricesDailyQuotesHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /api/prices-daily-quotes
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  FinsStatementsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-fins-statements
      PackageType: Image
      ImageConfig:
        Command: [ "api.finsStatementsHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /api/fins-statements
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  SlackNotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-slack-notify
      PackageType: Image
      ImageConfig:
        Command: [ "update.slackNotifyHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 22 * * ? *)
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  ScreenerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-screener
      PackageType: Image
      ImageConfig:
        Command: [ "api.screenerHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /api/screener
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  TmpCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-tmp-code
      PackageType: Image
      ImageConfig:
        Command: [ "api.tmp_code_handler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /api/tmp_code
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  RefreshTokenUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-refresh-token-updater
      PackageType: Image
      ImageConfig:
        Command: [ "update.refreshTokenUpdateHandler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MySchedule:
          Type: Schedule
          Properties:
            Schedule: rate(5 days)
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  IdTokenUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-id-token-updater
      PackageType: Image
      ImageConfig:
        Command: [ "update.id_token_updater_handler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MySchedule:
          Type: Schedule
          Properties:
            Schedule: rate(20 hours)
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  ListedInfoUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-listed-info-updater
      PackageType: Image
      ImageConfig:
        Command: [ "update.listed_info_updater_handler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 10 * * ? *)
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  PricesDailyQuotesUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-daily-quotes-updater
      PackageType: Image
      ImageConfig:
        Command: [ "update.prices_daily_quotes_updater_handler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 10 * * ? *)
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  FinsStatementsUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-statements-updater
      PackageType: Image
      ImageConfig:
        Command: [ "update.fins_statements_updater_handler" ]
      Role: !GetAtt MyLambdaRole.Arn
      Architectures:
      - x86_64
      Events:
        MySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 10 * * ? *)
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

Outputs:
  MyApiGateway:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
